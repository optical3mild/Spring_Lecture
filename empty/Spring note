[1. Spring 개발환경 설정]

 1.Spring : jsp 기술중의 하나
 2.툴: 이클립스 + 스프링 플러그인 or STS or InteilJ(안드로이드)
 
 3.Spring 디렉토리 구조
 	pom.xml - Maven 설정파일.
	src/main/java - 자바 코드 (Controller, Model, Service)
	src/main/resources - 자바코드에서 참조하는 리소스 파일들 : sqlMapConfig.xml, **MyBatis의 Mapper.

	src/test/java - 테스트 관련 코드
	src/test/resources - 테스트 코드에서 참조하는 리소스 파일들
	
	
	src/main/webapp - 웹서비스 루트 디렉토리(외부에서 접근가능)
	src/main/webapp/resources - js,css,image 등의 웹리소스 파일
	
	src/main/webapp/WEB-INF/classes - 컴파일된 클래스
	src/main/webapp/WEB-INF/spring - 스프링의 환경설정파일
	
	src/main/webapp/WEB-INF/spring/root-context.xml - 서블릿과 관련되지 않은 모든 리소스에 대한 설정
	src/main/webapp/WEB-INF/spring/servlet-context.xml - 서블릿과 관련된 리소스에 대한 설정
	
	src/main/webapp/WEB-INF/views - html, jsp 페이지
	src/main/webapp/WEB-INF - 외부에서 접근 불가능(보안을 위해서). 컨트롤러를 경유해 접근 가능.
	pom.xml - 메이븐에서 참조하는 설정파일.

--------------------------------------------------------------------	 				
**Service
Controller => Service => Model => View
 
 *동영상 1번 6:00
"게시물 작성, 포인트 부여"
 -> 트랜젝션 처리의 경우 : Service

**JUnit
개발완료 => 테스트 => 납품 => 검수

**Maven 빌드 도구

	
**MyBatis
 : MyBatis는 자바 퍼시스턴스 프레임워크의 하나로 XML 서술자나 애너테이션(annotation)을 사용하여
   저장 프로시저나 SQL 문으로 객체들을 연결시킨다.
   마이바티스는 아파치 라이선스 2.0으로 배포되는 자유 소프트웨어이다.
   마이바티스는 IBATIS 3.0의 포크이며 IBATIS의 원 개발자들이 포함된 팀에 의해 유지보수되고 있다.
**Service
Controller => Service => Model => View
 
 *동영상 1번 6:00
"게시물 작성, 포인트 부여"
 -> 트랜젝션 처리의 경우 : Service

**JUnit
개발완료 => 테스트 => 납품 => 검수

**Maven 빌드 도구
pom.xml : Maven 설정파일	
---------------------------------------------------------------------
	
		
 4. 스프링의 주요 특징.
 	-POJO(Plain Old Java Object) 기반의 구성 : 별도의 API가 필요하지 않은 일반적인 자바 코드를 이용하여 개발 가능.
 	-의존성 주입(DI)을 통한 객체간의 관계 구성.
 	-AOP(Aspect Oriented Programming)지원 : 반복적인 코드를 줄이고 개발자가 비즈니스 로직에만 집중할 수 있도록 지원함.
 	-편리한 MVC구조
 	-WAS(tomcat 등)에 종속적이지 않은 개발환경.
 	
 	1)IoC (Inversion of Control, 제어의 역전) - 객체에 대한 제어권
 		-기존에는 개발자에게 제어권이 있었음.(new 연산자)
 		-인스턴스의 라이프 사이클(생성부터 소멸까지)을 개발자가 아닌 스프링 프레임워크가 담당.
 	
 	2)DI(Dependency Injection, 의존관계 주입)
 		-객체간의 의존성을 개발자가 설정하는 것이 아닌 스프링컨테이너가 주입시켜 주는 기능.
 		-객체를 쉽게 확장하고 재사용할 수 있음.
 		
 		1>의존관계
 			B의 코드가 변경되면 A의 코드도 변경되는 경우
 			--> A와 B는 의존관계에 있다.
 			--> A는 B에 의존한다.
 			
 			A:코드변경 발생 --> B:유연한 확장이 어려움.
 			
 			강한 결합과 느슨한 결합
 			-->B의 코드 변경이 A에 영향을 끼치지 않도록 느슨하게 설계
 			A:코드변경 불필요 --> B:유연한 확장이 가능함. 핵심기능의 변경이 쉬워짐.
 			
 			강한 결합은 (결합도가 높으면) 유지보수를 어렵게 함.
 			-->한곳의 수정이 다른곳에 영향을 끼침.
 			
 		2> 강한결합관계와 느슨한 결합관계
 			-강한결합
 				class MemberUse {
 					public MemberUse() {
 						Member m = new Member();
 					}	
 				}
 				public class Member {
 					String userid;
 					String passwd;
 					String name;
 					private Member() {
 					}	
 				}
 				--> 생성자가 private로 바뀌면 MemberUse 클래스도 수정해야 함.
 			
 			-느슨한 결합
 				class MemberUse() {
 					public MemberUse(Member m) {
 					}
 				}	
				public class Member {
					String userid;
					String passwd;
					String name;
					private Member(){};
				} 				
 				--> 매개변수로 Member 객체를 받음으로써 생성자가 private로 바뀌어도 영향을 받지 않음.
 				--> Member 객체는 스프링에서 의존성 주입을 통해 생성하여 넣어주고 관리한다.(IoC, DI)
 				
**Spring starter project : Spring Boot로 설정이 거의 없고, 코딩만으로 작업.
**Spring Legarcy project : 실무에서 많이 사용.
**Spring 3점대 버전 사용

Spring Legacy project --> Spring MVC project
	project name : 형식?;;;
	package name : com.naver.test 등의 형식




 				
 				
 				
 					
 				
 				
 		
 			